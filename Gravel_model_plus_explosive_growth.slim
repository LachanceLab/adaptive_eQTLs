// Based on SLiM Recipe 5.4
// Core demographic model from Gravel et al. (PNAS 2011)
// Modification made: explosive population growth during the past 80 generations


initialize() {
	initializeMutationRate(2.36e-8);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 100000);
	initializeRecombinationRate(1e-8);
}

// Create the ancestral African population
1 { sim.addSubpop("p1", 7310); }

// Burn-in proceeds for 52080 generations
// Expand the African population to 14474 individuals
// This occurs 5920 generations ago (25 years per generation)
52080 { p1.setSubpopulationSize(14474); }

// Split non-Africans from Africans and set up migration between them
// This occurs 2040 generations ago
55960 {
	sim.addSubpopSplit("p2", 1861, p1);
	p1.setMigrationRates(c(p2), c(15e-5));
	p2.setMigrationRates(c(p1), c(15e-5));
}

// Split p2 into European and East Asian subpopulations
// This occurs 920 generations ago
57080 {
	sim.addSubpopSplit("p3", 554, p2);
	p2.setSubpopulationSize(1032);  // reduce European size

	// Set migration rates for the rest of the simulation
	p1.setMigrationRates(c(p2, p3), c(2.5e-5, 0.78e-5));
	p2.setMigrationRates(c(p1, p3), c(2.5e-5, 3.11e-5));
	p3.setMigrationRates(c(p1, p2), c(0.78e-5, 3.11e-5));
}


// Set up exponential growth in Europe and East Asia for 840 generations
// Each generation the population of Europe grows by 0.38%
// Each generation the population of East Asia grows by 0.48%
57080:57920 {
	t = sim.generation - 57080;
	p2_size = round(1032 * exp(0.0038 * t));
	p3_size = round(554 * exp(0.0048 * t));
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}

// Set up explosive exponential growth in Africa, Europe, East Asia for 80 generations
// Each generation the population of Africa grows by 9.0%
// Each generation the population of Europe grows by 9.0%
// Each generation the population of East Asia grows by 9.0%

57920:58000 {
	t = sim.generation - 57920;
	p1_size = round(14474 * exp(0.0861777* t));
	p2_size = round(25116 * exp(0.0861777* t));
	p3_size = round(31231 * exp(0.0861777* t));
	p1.setSubpopulationSize(asInteger(p1_size));
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}

// Generation 58000 is the present  
// Output data in vcf format and terminate
58000 late() {
	AFR_sample = sample(p1.individuals, 661, replace=F); //AFR phase 3 sample size
	AFR_sample.genomes.outputVCF();
	EUR_sample = sample(p2.individuals, 503, replace=F); //EUR phase 3 sample size
	EUR_sample.genomes.outputVCF();
	EAS_sample = sample(p3.individuals, 504, replace=F); //EAS phase 3 sample size
	EAS_sample.genomes.outputVCF();
}
